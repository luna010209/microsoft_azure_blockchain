{"metadata":{"endpoints":{"/ccf-cert":{"get":{"js_module":"endpoints/common.js","js_function":"getCallerCert","forwarding_required":"always","authn_policies":["any_cert"]}},"/processor/policy":{"get":{"js_module":"endpoints/processor_registration.js","js_function":"getValidProcessorPolicy","forwarding_required":"always","authn_policies":["no_auth"]},"put":{"js_module":"endpoints/processor_registration.js","js_function":"setValidProcessorPolicy","forwarding_required":"always","authn_policies":["any_cert"]}},"/processor":{"put":{"js_module":"endpoints/processor_registration.js","js_function":"registerProcessor","forwarding_required":"always","authn_policies":["any_cert"]}},"/user":{"get":{"js_module":"endpoints/user_registration.js","js_function":"getUserPolicy","forwarding_required":"always","authn_policies":["no_auth"]},"put":{"js_module":"endpoints/user_registration.js","js_function":"setUserPolicy","forwarding_required":"always","authn_policies":["any_cert"]}},"/cases":{"post":{"js_module":"endpoints/case_management.js","js_function":"registerCase","forwarding_required":"always","authn_policies":["any_cert"]}},"/cases/next":{"get":{"js_module":"endpoints/case_management.js","js_function":"nextCase","forwarding_required":"always","authn_policies":["no_auth"]}},"/cases/indexed/{caseId}":{"get":{"js_module":"endpoints/case_management.js","js_function":"getCaseMetadata","forwarding_required":"always","authn_policies":["no_auth"]}},"/cases/indexed/{caseId}/decision":{"post":{"js_module":"endpoints/case_management.js","js_function":"putCaseDecision","forwarding_required":"always","authn_policies":["any_cert"]}}}},"modules":[{"name":"endpoints/all.js","module":"export { getProcessorMetadata, getValidProcessorPolicy, isValidProcessor, registerProcessor, setValidProcessorPolicy } from './processor_registration.js';\nexport { getPolicy, getUserPolicy, setUserPolicy } from './user_registration.js';\nexport { getCaseMetadata, nextCase, putCaseDecision, registerCase } from './case_management.js';\nexport { MAP_PREFIX, SINGLETON_KEY, equal_uint8array, errorResponse, getCallerCert, result_error, result_ok } from './common.js';\n"},{"name":"endpoints/case_management.js","module":"import { typedKv } from '../node_modules/@microsoft/ccf-app/kv.js';\nimport { int32, arrayBuffer, json } from '../node_modules/@microsoft/ccf-app/converters.js';\nimport '../node_modules/@microsoft/ccf-app/consensus.js';\nimport '../node_modules/@microsoft/ccf-app/historical.js';\nimport '../node_modules/@microsoft/ccf-app/endpoints.js';\nimport { MAP_PREFIX, SINGLETON_KEY } from './common.js';\nimport { isValidProcessor } from './processor_registration.js';\nimport { getPolicy } from './user_registration.js';\n\nconst kvCaseId = typedKv(MAP_PREFIX + \"caseId\", arrayBuffer, int32);\nconst kvCases = typedKv(\"caseMetadata\", int32, json());\nconst kvCaseQueue = typedKv(MAP_PREFIX + \"caseQueue\", arrayBuffer, json());\nfunction getCaseQueue() {\n    if (!kvCaseQueue.has(SINGLETON_KEY)) {\n        kvCaseQueue.set(SINGLETON_KEY, []);\n    }\n    return kvCaseQueue.get(SINGLETON_KEY);\n}\nfunction registerCase(request) {\n    let incident = request.body.text();\n    const callerId = acl.certUtils.convertToAclFingerprintFormat();\n    const policy = getPolicy(callerId);\n    if (policy === undefined) {\n        return { statusCode: 404, body: \"No policy found for this user\" };\n    }\n    var case_id_int = kvCaseId.get(SINGLETON_KEY);\n    if (case_id_int === undefined) {\n        case_id_int = 0;\n    }\n    kvCaseId.set(SINGLETON_KEY, case_id_int + 1);\n    const case_id = case_id_int;\n    kvCases.set(case_id, {\n        incident,\n        policy,\n        decision: {\n            decision: \"\",\n            processor_fingerprint: \"\",\n        },\n    });\n    let caseQueue = getCaseQueue();\n    caseQueue.push(case_id);\n    kvCaseQueue.set(SINGLETON_KEY, caseQueue);\n    return {\n        statusCode: 200,\n        body: String(case_id),\n    };\n}\nfunction nextCase(request) {\n    let caseQueue = getCaseQueue();\n    if (caseQueue.length <= 0) {\n        return {\n            statusCode: 404,\n            body: \"No cases found\",\n        };\n    }\n    let case_id = caseQueue.shift();\n    caseQueue.push(case_id);\n    kvCaseQueue.set(SINGLETON_KEY, caseQueue);\n    if (!kvCases.has(case_id)) {\n        return {\n            statusCode: 500,\n            body: `Case ${case_id} in case queue but not in store.`,\n        };\n    }\n    return {\n        statusCode: 200,\n        body: { caseId: case_id, metadata: kvCases.get(case_id) },\n    };\n}\nfunction getCaseMetadata(request) {\n    try {\n        const caseIdParam = request.params[\"caseId\"];\n        if (!caseIdParam || typeof caseIdParam !== \"string\") {\n            return {\n                statusCode: 400,\n                body: \"Missing or invalid caseId in parameters.\",\n            };\n        }\n        var caseId = Number(caseIdParam);\n    }\n    catch (error) {\n        return {\n            statusCode: 400,\n            body: \"Exception while parsing request: \" + error.message,\n        };\n    }\n    const caseMetadata = kvCases.get(caseId);\n    if (!caseMetadata) {\n        return { statusCode: 404, body: \"Case not found\" };\n    }\n    return {\n        statusCode: 200,\n        body: {\n            metadata: caseMetadata,\n            version: kvCases.getVersionOfPreviousWrite(caseId),\n        },\n    };\n}\nfunction putCaseDecision(request) {\n    try {\n        const caseIdParam = request.params[\"caseId\"];\n        if (!caseIdParam || typeof caseIdParam !== \"string\") {\n            return {\n                statusCode: 400,\n                body: \"Missing or invalid caseId in parameters.\",\n            };\n        }\n        var caseId = Number(caseIdParam);\n        var { incident, policy, decision } = request.body.json();\n        if (!incident || typeof incident !== \"string\") {\n            return { statusCode: 400, body: \"Missing or invalid incident\" };\n        }\n        if (!policy || typeof policy !== \"string\") {\n            return { statusCode: 400, body: \"Missing or invalid policy\" };\n        }\n        const possible_decisions = new Set([\"approve\", \"deny\", \"error\"]);\n        if (!decision ||\n            typeof decision !== \"string\" ||\n            !possible_decisions.has(decision)) {\n            return { statusCode: 400, body: \"Missing or invalid decision\" };\n        }\n    }\n    catch (error) {\n        return {\n            statusCode: 400,\n            body: \"Exception while parsing request: \" + error.message,\n        };\n    }\n    let caseMetadata = kvCases.get(caseId);\n    if (!caseMetadata) {\n        return { statusCode: 404, body: \"Case not found\" };\n    }\n    if (caseMetadata.decision.decision !== \"\") {\n        return { statusCode: 400, body: \"Already stored decision for case.\" };\n    }\n    if (caseMetadata.incident !== incident || caseMetadata.policy !== policy) {\n        return {\n            statusCode: 400,\n            body: \"Expected case metadata does not match processed metadata\",\n        };\n    }\n    const callerId = acl.certUtils.convertToAclFingerprintFormat();\n    if (!isValidProcessor(callerId)) {\n        return { statusCode: 403, body: \"Invalid processor\" };\n    }\n    kvCases.set(caseId, {\n        ...caseMetadata,\n        decision: { decision, processor_fingerprint: callerId },\n    });\n    let queue = getCaseQueue();\n    let filtered_queue = queue.filter((val, idx, arr) => val != caseId);\n    kvCaseQueue.set(SINGLETON_KEY, filtered_queue);\n    return { statusCode: 200 };\n}\n\nexport { getCaseMetadata, nextCase, putCaseDecision, registerCase };\n"},{"name":"endpoints/common.js","module":"const SINGLETON_KEY = new ArrayBuffer(8);\nconst MAP_PREFIX = \"\";\nfunction errorResponse(code, msg) {\n    return {\n        statusCode: code,\n        body: {\n            error: msg,\n        },\n    };\n}\nfunction result_ok() {\n    return { ok: true, value: \"Everything ok\" };\n}\nfunction result_error(msg) {\n    return {\n        ok: false,\n        value: msg,\n    };\n}\nfunction equal_uint8array(a, b) {\n    if (a.length != b.length) {\n        return false;\n    }\n    let dv1 = new Uint8Array(a);\n    let dv2 = new Uint8Array(b);\n    for (var i = 0; i < a.length; i++) {\n        if (dv1[i] != dv2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getCallerCert(request) {\n    const callerId = acl.certUtils.convertToAclFingerprintFormat();\n    return {\n        body: callerId,\n    };\n}\n\nexport { MAP_PREFIX, SINGLETON_KEY, equal_uint8array, errorResponse, getCallerCert, result_error, result_ok };\n"},{"name":"endpoints/processor_registration.js","module":"import { typedKv } from '../node_modules/@microsoft/ccf-app/kv.js';\nimport { json, arrayBuffer, string, typedArray } from '../node_modules/@microsoft/ccf-app/converters.js';\nimport '../node_modules/@microsoft/ccf-app/consensus.js';\nimport '../node_modules/@microsoft/ccf-app/historical.js';\nimport '../node_modules/@microsoft/ccf-app/endpoints.js';\nimport { MAP_PREFIX, SINGLETON_KEY, equal_uint8array } from './common.js';\nimport { Base64 as gBase64 } from '../node_modules/js-base64/base64.mjs.js';\nimport { snp_attestation, ccf } from '../node_modules/@microsoft/ccf-app/global.js';\n\nconst validProcessorPolicy = typedKv(MAP_PREFIX + \"validProcessorProperties\", arrayBuffer, json());\nconst processors = typedKv(MAP_PREFIX + \"validProcessors\", string, json());\nfunction isValidProcessor(processor_cert_fingerprint) {\n    let metadata = processors.get(processor_cert_fingerprint);\n    try {\n        validateProcessorMetadata(metadata);\n    }\n    catch (error) {\n        return false;\n    }\n    return true;\n}\nfunction getProcessorMetadata(processor_cert_fingerprint) {\n    return processors.get(processor_cert_fingerprint);\n}\nfunction validateProcessorMetadata(properties) {\n    let valid_policies = validProcessorPolicy.get(SINGLETON_KEY);\n    if (!valid_policies.includes(properties.policy)) {\n        throw new Error(\"UVM's policy is invalid.\");\n    }\n}\nfunction setValidProcessorPolicy(request) {\n    const callerId = acl.certUtils.convertToAclFingerprintFormat();\n    const actionPermitted = acl.authz.actionAllowed(callerId, \"/processor/write\");\n    if (!actionPermitted) {\n        return {\n            statusCode: 403,\n            body: `${callerId} is not authorized to set uvm endorsements.`,\n        };\n    }\n    try {\n        var { policies } = request.body.json();\n        if (!policies ||\n            !Array.isArray(policies) ||\n            !policies.every((item) => typeof item === \"string\")) {\n            return { statusCode: 400, body: \"Missing or invalid policies\" };\n        }\n    }\n    catch (error) {\n        return {\n            statusCode: 400,\n            body: \"Error while parsing policy: \" + error.message,\n        };\n    }\n    validProcessorPolicy.set(SINGLETON_KEY, policies);\n    return { statusCode: 200 };\n}\nfunction getValidProcessorPolicy(request) {\n    return {\n        statusCode: 200,\n        body: validProcessorPolicy.get(SINGLETON_KEY),\n    };\n}\nfunction registerProcessor(request) {\n    let bytes_attestation;\n    let bytes_platform_certificates;\n    let bytes_uvm_endorsements;\n    try {\n        let { attestation, platform_certificates, uvm_endorsements } = request.body.json();\n        if (!attestation || typeof attestation !== \"string\") {\n            return { statusCode: 400, body: \"Missing or invalid attestation\" };\n        }\n        bytes_attestation = typedArray(Uint8Array)\n            .encode(gBase64.toUint8Array(attestation));\n        if (!platform_certificates || typeof platform_certificates !== \"string\") {\n            return {\n                statusCode: 400,\n                body: \"Missing or invalid platform_certificates.\",\n            };\n        }\n        bytes_platform_certificates = typedArray(Uint8Array)\n            .encode(gBase64.toUint8Array(platform_certificates));\n        if (!uvm_endorsements || typeof uvm_endorsements !== \"string\") {\n            return { statusCode: 400, body: \"Missing or invalid uvm_endorsements.\" };\n        }\n        bytes_uvm_endorsements = typedArray(Uint8Array)\n            .encode(gBase64.toUint8Array(uvm_endorsements));\n    }\n    catch (error) {\n        return {\n            statusCode: 400,\n            body: \"Error while parsing processor metadata: \" + error.message,\n        };\n    }\n    let attestation_result;\n    try {\n        attestation_result = snp_attestation.verifySnpAttestation(bytes_attestation, bytes_platform_certificates, bytes_uvm_endorsements);\n    }\n    catch (error) {\n        return {\n            statusCode: 400,\n            body: \"Error while verifying attestation: \" + error.message,\n        };\n    }\n    const report_data = typedArray(Uint8Array)\n        .decode(attestation_result.attestation.report_data);\n    const callerId = acl.certUtils.convertToAclFingerprintFormat();\n    const array_buf_callerId = string.encode(callerId);\n    const expected_report_data = typedArray(Uint8Array)\n        .decode(ccf.crypto.digest(\"SHA-256\", array_buf_callerId));\n    if (!equal_uint8array(expected_report_data.slice(0, 32), report_data.slice(0, 32))) {\n        return {\n            statusCode: 400,\n            body: \"Report data \" +\n                JSON.stringify({\n                    report_data: gBase64.fromUint8Array(typedArray(Uint8Array)\n                        .decode(attestation_result.attestation.report_data.slice(0, 32))),\n                    cert: gBase64.fromUint8Array(typedArray(Uint8Array).decode(expected_report_data)),\n                }),\n        };\n    }\n    let measurement_b64 = gBase64.fromUint8Array(typedArray(Uint8Array)\n        .decode(attestation_result.attestation.measurement));\n    let policy_b64 = gBase64.fromUint8Array(typedArray(Uint8Array)\n        .decode(attestation_result.attestation.host_data));\n    let metadata = {\n        uvm_endorsements: attestation_result.uvm_endorsements,\n        measurement: measurement_b64,\n        policy: policy_b64,\n    };\n    try {\n        validateProcessorMetadata(metadata);\n    }\n    catch (error) {\n        return {\n            statusCode: 400,\n            body: JSON.stringify({\n                errormessage: error.message,\n                attested_metadata: metadata,\n            }),\n        };\n    }\n    const processorCertFingerprint = acl.certUtils.convertToAclFingerprintFormat();\n    processors.set(processorCertFingerprint, metadata);\n    return { statusCode: 200 };\n}\n\nexport { getProcessorMetadata, getValidProcessorPolicy, isValidProcessor, registerProcessor, setValidProcessorPolicy };\n"},{"name":"endpoints/user_registration.js","module":"import { typedKv } from '../node_modules/@microsoft/ccf-app/kv.js';\nimport { string } from '../node_modules/@microsoft/ccf-app/converters.js';\nimport '../node_modules/@microsoft/ccf-app/consensus.js';\nimport '../node_modules/@microsoft/ccf-app/historical.js';\nimport '../node_modules/@microsoft/ccf-app/endpoints.js';\nimport { MAP_PREFIX, errorResponse } from './common.js';\n\nconst userPolicies = typedKv(MAP_PREFIX + \"userPolicy\", string, string);\nfunction getPolicy(user_fingerprint) {\n    return userPolicies.get(user_fingerprint);\n}\nfunction getUserPolicy(request) {\n    const callerId = acl.certUtils.convertToAclFingerprintFormat();\n    if (!userPolicies.has(callerId)) {\n        return errorResponse(400, \"No policy found\");\n    }\n    return {\n        statusCode: 200,\n        body: userPolicies.get(callerId),\n    };\n}\nfunction setUserPolicy(request) {\n    const callerId = acl.certUtils.convertToAclFingerprintFormat();\n    const actionPermitted = acl.authz.actionAllowed(callerId, \"/policy/write\");\n    if (!actionPermitted) {\n        return errorResponse(403, `${callerId} is not authorized to set an insurance policy.`);\n    }\n    try {\n        var { cert, policy } = request.body.json();\n        if (!cert || typeof cert !== \"string\") {\n            return errorResponse(400, \"Missing or invalid user certificate.\");\n        }\n        if (!policy || typeof policy !== \"string\") {\n            return errorResponse(400, \"Missing or invalid policy.\");\n        }\n    }\n    catch (error) {\n        return errorResponse(400, \"Failed while parsing body: \" + error.message);\n    }\n    userPolicies.set(cert, policy);\n    return {\n        statusCode: 200,\n    };\n}\n\nexport { getPolicy, getUserPolicy, setUserPolicy };\n"},{"name":"node_modules/js-base64/base64.mjs.js","module":"/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n\nexport { gBase64 as Base64, VERSION, _atob as atob, atobPolyfill, _btoa as btoa, btoaPolyfill, btou, decode, encode, encodeURI, encodeURI as encodeURL, extendBuiltins, extendString, extendUint8Array, decode as fromBase64, fromUint8Array, isValid, encode as toBase64, toUint8Array, utob, version };\n"},{"name":"node_modules/@microsoft/ccf-app/consensus.js","module":"import { ccf } from './global.js';\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n/**\n * @inheritDoc global!CCFConsensus.getLastCommittedTxId\n */\nccf.consensus.getLastCommittedTxId.bind(ccf.consensus);\n/**\n * @inheritDoc global!CCFConsensus.getStatusForTxId\n */\nccf.consensus.getStatusForTxId.bind(ccf.consensus);\n/**\n * @inheritDoc global!CCFConsensus.getViewForSeqno\n */\nccf.consensus.getViewForSeqno.bind(ccf.consensus);\n"},{"name":"node_modules/@microsoft/ccf-app/converters.js","module":"import { ccf } from './global.js';\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\nfunction checkNumber(val) {\n    if (typeof val !== \"number\") {\n        throw new TypeError(`Value ${val} is not a number`);\n    }\n}\nfunction checkInt(val) {\n    checkNumber(val);\n    if (!Number.isInteger(val)) {\n        throw new TypeError(`Value ${val} is not an integer`);\n    }\n}\nfunction checkString(val) {\n    if (typeof val !== \"string\") {\n        throw new TypeError(`Value ${val} is not a string`);\n    }\n}\nclass Int32Converter {\n    encode(val) {\n        checkInt(val);\n        if (val < -2147483648 || val > 2147483647) {\n            throw new RangeError(\"value is not within int32 range\");\n        }\n        const buf = new ArrayBuffer(4);\n        new DataView(buf).setInt32(0, val, true);\n        return buf;\n    }\n    decode(buf) {\n        return new DataView(buf).getInt32(0, true);\n    }\n}\nclass StringConverter {\n    encode(val) {\n        checkString(val);\n        return ccf.strToBuf(val);\n    }\n    decode(buf) {\n        return ccf.bufToStr(buf);\n    }\n}\nclass JSONConverter {\n    encode(val) {\n        return ccf.jsonCompatibleToBuf(val);\n    }\n    decode(buf) {\n        return ccf.bufToJsonCompatible(buf);\n    }\n}\nclass TypedArrayConverter {\n    constructor(clazz) {\n        this.clazz = clazz;\n    }\n    encode(val) {\n        return val.buffer.slice(val.byteOffset, val.byteOffset + val.byteLength);\n    }\n    decode(buf) {\n        return new this.clazz(buf);\n    }\n}\nclass IdentityConverter {\n    encode(val) {\n        return val;\n    }\n    decode(buf) {\n        return buf;\n    }\n}\n/**\n * Converter for `number` values, encoded as `int32`.\n *\n * Example:\n * ```\n * const buf = ccfapp.int32.encode(-50000); // ArrayBuffer of size 4\n * const val = ccfapp.int32.decode(buf);    // number\n * ```\n */\nconst int32 = new Int32Converter();\n/**\n * Converter for `string` values, encoded as UTF-8.\n *\n * Example:\n * ```\n * const buf = ccfapp.string.encode('my-string'); // ArrayBuffer\n * const val = ccfapp.string.decode(buf);         // string\n * ```\n */\nconst string = new StringConverter();\n/**\n * Returns a converter for JSON-compatible objects or values.\n *\n * {@linkcode DataConverter.encode | encode} first serializes the object\n * or value to JSON and then converts the resulting string to an `ArrayBuffer`.\n * JSON serialization uses `JSON.stringify()` without `replacer` or\n * `space` parameters.\n *\n * {@linkcode DataConverter.decode | decode} converts the `ArrayBuffer`\n * to a string and parses it using `JSON.parse()` without `reviver`\n * parameter.\n *\n * Example:\n * ```\n * interface Person {\n *   name: string\n *   age: number\n * }\n * const person: Person = { name: \"John\", age: 42 };\n * const conv = ccfapp.json<Person>();\n * const buffer = conv.encode(person); // ArrayBuffer\n * const person2 = conv.decode(buffer); // Person\n * ```\n */\nconst json = () => new JSONConverter();\n/**\n * Returns a converter for [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) objects.\n *\n * Note that a `TypedArray` is a view into an underlying `ArrayBuffer`.\n * This view allows to cover a subset of the `ArrayBuffer`, for example\n * when using `TypedArray.prototype.subarray()`.\n * For views which are subsets, a roundtrip from `TypedArray` to `ArrayBuffer`\n * and back will yield a `TypedArray` that is not a subset anymore.\n *\n * Example:\n * ```\n * const arr = new Uint8Array([42]);\n * const conv = ccfapp.typedArray(Uint8Array);\n * const buffer = conv.encode(arr); // ArrayBuffer of size arr.byteLength\n * const arr2 = conv.decode(buffer); // Uint8Array\n * ```\n *\n * @param clazz The TypedArray class, for example `Uint8Array`.\n */\nconst typedArray = (clazz) => new TypedArrayConverter(clazz);\n/**\n * Identity converter.\n * {@linkcode DataConverter.encode | encode} / {@linkcode DataConverter.decode | decode}\n * return the input `ArrayBuffer` unchanged. No copy is made.\n *\n * This converter can be used with {@linkcode kv.typedKv} when the key or value\n * type is `ArrayBuffer`, in which case no conversion is applied.\n */\nconst arrayBuffer = new IdentityConverter();\n\nexport { arrayBuffer, int32, json, string, typedArray };\n"},{"name":"node_modules/@microsoft/ccf-app/endpoints.js","module":"import { ccf } from './global.js';\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n/**\n * @inheritDoc global!CCFRpc.setApplyWrites\n */\nccf.rpc.setApplyWrites.bind(ccf.rpc);\n/**\n * @inheritDoc global!CCFRpc.setClaimsDigest\n */\nccf.rpc.setClaimsDigest.bind(ccf.rpc);\n"},{"name":"node_modules/@microsoft/ccf-app/global.js","module":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the Apache 2.0 License.\n/**\n * This module describes the global {@linkcode ccf} variable.\n * Direct access of this module or the {@linkcode ccf} variable is\n * typically not needed as all of its functionality is exposed\n * via other, often more high-level, modules.\n *\n * Accessing the {@linkcode ccf} global in a type-safe way is done\n * as follows:\n *\n * ```\n * import { ccf } from '@microsoft/ccf-app/global.js';\n * ```\n *\n * @module\n */\n// The global ccf variable and associated types are exported\n// as a regular module instead of using an ambient namespace\n// in a .d.ts definition file.\n// This avoids polluting the global namespace.\nconst ccf = globalThis.ccf;\nconst snp_attestation = globalThis\n    .snp_attestation;\n\nexport { ccf, snp_attestation };\n"},{"name":"node_modules/@microsoft/ccf-app/historical.js","module":"import { ccf } from './global.js';\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n/**\n * @inheritDoc global!CCF.historicalState\n */\nccf.historicalState;\n/**\n * @inheritDoc global!CCFHistorical.getStateRange\n */\nccf.historical.getStateRange.bind(ccf.historical);\n/**\n * @inheritDoc global!CCFHistorical.dropCachedStates\n */\nccf.historical.dropCachedStates.bind(ccf.historical);\n"},{"name":"node_modules/@microsoft/ccf-app/kv.js","module":"import { ccf } from './global.js';\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\nclass TypedKvMap {\n    constructor(kv, kt, vt) {\n        this.kv = kv;\n        this.kt = kt;\n        this.vt = vt;\n    }\n    has(key) {\n        return this.kv.has(this.kt.encode(key));\n    }\n    get(key) {\n        const v = this.kv.get(this.kt.encode(key));\n        return v === undefined ? undefined : this.vt.decode(v);\n    }\n    getVersionOfPreviousWrite(key) {\n        return this.kv.getVersionOfPreviousWrite(this.kt.encode(key));\n    }\n    set(key, value) {\n        this.kv.set(this.kt.encode(key), this.vt.encode(value));\n        return this;\n    }\n    delete(key) {\n        this.kv.delete(this.kt.encode(key));\n    }\n    clear() {\n        this.kv.clear();\n    }\n    forEach(callback) {\n        let kt = this.kt;\n        let vt = this.vt;\n        let typedMap = this;\n        this.kv.forEach(function (raw_v, raw_k, table) {\n            callback(vt.decode(raw_v), kt.decode(raw_k), typedMap);\n        });\n    }\n    get size() {\n        return this.kv.size;\n    }\n}\n/**\n * Returns a typed view of a map in the Key-Value Store,\n * where keys and values are automatically converted\n * to and from ``ArrayBuffer`` based on the given key\n * and value converters.\n *\n * See the {@linkcode converters} module for available converters.\n *\n * @param nameOrMap Either the map name in the Key-Value Store,\n *    or a ``KvMap`` object.\n * @param kt The converter to use for map keys.\n * @param vt The converter to use for map values.\n */\nfunction typedKv(nameOrMap, kt, vt) {\n    const kvMap = typeof nameOrMap === \"string\" ? ccf.kv[nameOrMap] : nameOrMap;\n    return new TypedKvMap(kvMap, kt, vt);\n}\n/**\n * @inheritDoc global!CCF.kv\n */\nccf.kv;\n\nexport { TypedKvMap, typedKv };\n"}]}