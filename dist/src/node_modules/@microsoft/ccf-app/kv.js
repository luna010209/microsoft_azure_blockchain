import { ccf } from './global.js';

// Copyright (c) Microsoft Corporation. All rights reserved.
class TypedKvMap {
    constructor(kv, kt, vt) {
        this.kv = kv;
        this.kt = kt;
        this.vt = vt;
    }
    has(key) {
        return this.kv.has(this.kt.encode(key));
    }
    get(key) {
        const v = this.kv.get(this.kt.encode(key));
        return v === undefined ? undefined : this.vt.decode(v);
    }
    getVersionOfPreviousWrite(key) {
        return this.kv.getVersionOfPreviousWrite(this.kt.encode(key));
    }
    set(key, value) {
        this.kv.set(this.kt.encode(key), this.vt.encode(value));
        return this;
    }
    delete(key) {
        this.kv.delete(this.kt.encode(key));
    }
    clear() {
        this.kv.clear();
    }
    forEach(callback) {
        let kt = this.kt;
        let vt = this.vt;
        let typedMap = this;
        this.kv.forEach(function (raw_v, raw_k, table) {
            callback(vt.decode(raw_v), kt.decode(raw_k), typedMap);
        });
    }
    get size() {
        return this.kv.size;
    }
}
/**
 * Returns a typed view of a map in the Key-Value Store,
 * where keys and values are automatically converted
 * to and from ``ArrayBuffer`` based on the given key
 * and value converters.
 *
 * See the {@linkcode converters} module for available converters.
 *
 * @param nameOrMap Either the map name in the Key-Value Store,
 *    or a ``KvMap`` object.
 * @param kt The converter to use for map keys.
 * @param vt The converter to use for map values.
 */
function typedKv(nameOrMap, kt, vt) {
    const kvMap = typeof nameOrMap === "string" ? ccf.kv[nameOrMap] : nameOrMap;
    return new TypedKvMap(kvMap, kt, vt);
}
/**
 * @inheritDoc global!CCF.kv
 */
ccf.kv;

export { TypedKvMap, typedKv };
