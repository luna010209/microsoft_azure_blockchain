import { ccf } from './global.js';

// Copyright (c) Microsoft Corporation. All rights reserved.
function checkNumber(val) {
    if (typeof val !== "number") {
        throw new TypeError(`Value ${val} is not a number`);
    }
}
function checkInt(val) {
    checkNumber(val);
    if (!Number.isInteger(val)) {
        throw new TypeError(`Value ${val} is not an integer`);
    }
}
function checkString(val) {
    if (typeof val !== "string") {
        throw new TypeError(`Value ${val} is not a string`);
    }
}
class Int32Converter {
    encode(val) {
        checkInt(val);
        if (val < -2147483648 || val > 2147483647) {
            throw new RangeError("value is not within int32 range");
        }
        const buf = new ArrayBuffer(4);
        new DataView(buf).setInt32(0, val, true);
        return buf;
    }
    decode(buf) {
        return new DataView(buf).getInt32(0, true);
    }
}
class StringConverter {
    encode(val) {
        checkString(val);
        return ccf.strToBuf(val);
    }
    decode(buf) {
        return ccf.bufToStr(buf);
    }
}
class JSONConverter {
    encode(val) {
        return ccf.jsonCompatibleToBuf(val);
    }
    decode(buf) {
        return ccf.bufToJsonCompatible(buf);
    }
}
class TypedArrayConverter {
    constructor(clazz) {
        this.clazz = clazz;
    }
    encode(val) {
        return val.buffer.slice(val.byteOffset, val.byteOffset + val.byteLength);
    }
    decode(buf) {
        return new this.clazz(buf);
    }
}
class IdentityConverter {
    encode(val) {
        return val;
    }
    decode(buf) {
        return buf;
    }
}
/**
 * Converter for `number` values, encoded as `int32`.
 *
 * Example:
 * ```
 * const buf = ccfapp.int32.encode(-50000); // ArrayBuffer of size 4
 * const val = ccfapp.int32.decode(buf);    // number
 * ```
 */
const int32 = new Int32Converter();
/**
 * Converter for `string` values, encoded as UTF-8.
 *
 * Example:
 * ```
 * const buf = ccfapp.string.encode('my-string'); // ArrayBuffer
 * const val = ccfapp.string.decode(buf);         // string
 * ```
 */
const string = new StringConverter();
/**
 * Returns a converter for JSON-compatible objects or values.
 *
 * {@linkcode DataConverter.encode | encode} first serializes the object
 * or value to JSON and then converts the resulting string to an `ArrayBuffer`.
 * JSON serialization uses `JSON.stringify()` without `replacer` or
 * `space` parameters.
 *
 * {@linkcode DataConverter.decode | decode} converts the `ArrayBuffer`
 * to a string and parses it using `JSON.parse()` without `reviver`
 * parameter.
 *
 * Example:
 * ```
 * interface Person {
 *   name: string
 *   age: number
 * }
 * const person: Person = { name: "John", age: 42 };
 * const conv = ccfapp.json<Person>();
 * const buffer = conv.encode(person); // ArrayBuffer
 * const person2 = conv.decode(buffer); // Person
 * ```
 */
const json = () => new JSONConverter();
/**
 * Returns a converter for [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) objects.
 *
 * Note that a `TypedArray` is a view into an underlying `ArrayBuffer`.
 * This view allows to cover a subset of the `ArrayBuffer`, for example
 * when using `TypedArray.prototype.subarray()`.
 * For views which are subsets, a roundtrip from `TypedArray` to `ArrayBuffer`
 * and back will yield a `TypedArray` that is not a subset anymore.
 *
 * Example:
 * ```
 * const arr = new Uint8Array([42]);
 * const conv = ccfapp.typedArray(Uint8Array);
 * const buffer = conv.encode(arr); // ArrayBuffer of size arr.byteLength
 * const arr2 = conv.decode(buffer); // Uint8Array
 * ```
 *
 * @param clazz The TypedArray class, for example `Uint8Array`.
 */
const typedArray = (clazz) => new TypedArrayConverter(clazz);
/**
 * Identity converter.
 * {@linkcode DataConverter.encode | encode} / {@linkcode DataConverter.decode | decode}
 * return the input `ArrayBuffer` unchanged. No copy is made.
 *
 * This converter can be used with {@linkcode kv.typedKv} when the key or value
 * type is `ArrayBuffer`, in which case no conversion is applied.
 */
const arrayBuffer = new IdentityConverter();

export { arrayBuffer, int32, json, string, typedArray };
