/**
 * This module provides access to the Key-Value Store of CCF.
 *
 * Example of using raw access:
 * ```
 * import * as ccfapp from '@microsoft/ccf-app';
 *
 * const foo = ccfapp.rawKv['foo'];
 * foo.set(
 *  ccfapp.string.encode("key-1"),
 *  ccfapp.json.encode({"prop1": 42})
 * );
 * ```
 *
 * Example of using typed access:
 * ```
 * import * as ccfapp from '@microsoft/ccf-app';
 *
 * const foo = ccfapp.typedKv('foo', ccfapp.string, ccfapp.json);
 * foo.set("key-1", {"prop1": 42});
 * ```
 *
 * Example of using typed access with historical state:
 * ```
 * import * as ccfapp from '@microsoft/ccf-app';
 *
 * const states = ccfapp.getStateRange(handle, begin, end, expiry);
 * // ... error handling ...
 * const firstKv = states[0].kv;
 * const foo = ccfapp.typedKv(firstKv['foo'], ccfapp.string, ccfapp.json);
 * const val = foo.get("key-1");
 * ```
 *
 * @module
 */
import { KvMap } from "./global.js";
import { DataConverter } from "./converters.js";
export declare class TypedKvMap<K, V> {
    private kv;
    private kt;
    private vt;
    constructor(kv: KvMap, kt: DataConverter<K>, vt: DataConverter<V>);
    has(key: K): boolean;
    get(key: K): V | undefined;
    getVersionOfPreviousWrite(key: K): number | undefined;
    set(key: K, value: V): TypedKvMap<K, V>;
    delete(key: K): void;
    clear(): void;
    forEach(callback: (value: V, key: K, table: TypedKvMap<K, V>) => void): void;
    get size(): number;
}
export declare class TypedKvSet<K> {
    private kv;
    private kt;
    constructor(kv: KvMap, kt: DataConverter<K>);
    has(key: K): boolean;
    getVersionOfPreviousWrite(key: K): number | undefined;
    add(key: K): TypedKvSet<K>;
    delete(key: K): void;
    clear(): void;
    forEach(callback: (key: K, table: TypedKvSet<K>) => void): void;
    get size(): number;
}
/**
 * Returns a typed view of a map in the Key-Value Store,
 * where keys and values are automatically converted
 * to and from ``ArrayBuffer`` based on the given key
 * and value converters.
 *
 * See the {@linkcode converters} module for available converters.
 *
 * @param nameOrMap Either the map name in the Key-Value Store,
 *    or a ``KvMap`` object.
 * @param kt The converter to use for map keys.
 * @param vt The converter to use for map values.
 */
export declare function typedKv<K, V>(nameOrMap: string | KvMap, kt: DataConverter<K>, vt: DataConverter<V>): TypedKvMap<K, V>;
/**
 * Returns a typed view of a set in the Key-Value Store,
 * where keys are automatically converted
 * to and from ``ArrayBuffer`` based on the given key
 * converter.
 *
 * See the {@linkcode converters} module for available converters.
 *
 * @param nameOrMap Either the map name in the Key-Value Store,
 *    or a ``KvMap`` object.
 * @param kt The converter to use for map keys.
 */
export declare function typedKvSet<K, V>(nameOrMap: string | KvMap, kt: DataConverter<K>): TypedKvSet<K>;
/**
 * @inheritDoc global!CCF.kv
 */
export declare const rawKv: import("./global.js").KvMaps;
export { KvMap, KvSet, KvMaps } from "./global";
