/**
 * @inheritDoc global!CCFCrypto.generateAesKey
 */
export declare const generateAesKey: (size: number) => ArrayBuffer;
/**
 * @inheritDoc global!CCFCrypto.generateRsaKeyPair
 */
export declare const generateRsaKeyPair: (size: number, exponent?: number) => import("./global.js").CryptoKeyPair;
/**
 * @inheritDoc global!CCFCrypto.generateEcdsaKeyPair
 */
export declare const generateEcdsaKeyPair: (curve: string) => import("./global.js").CryptoKeyPair;
/**
 * @inheritDoc global!CCFCrypto.generateEddsaKeyPair
 */
export declare const generateEddsaKeyPair: (curve: string) => import("./global.js").CryptoKeyPair;
/**
 * @inheritDoc global!CCFCrypto.wrapKey
 */
export declare const wrapKey: (key: ArrayBuffer, wrappingKey: ArrayBuffer, wrapAlgo: import("./global.js").WrapAlgoParams) => ArrayBuffer;
/**
 * @inheritDoc global!CCFCrypto.unwrapKey
 */
export declare const unwrapKey: (key: ArrayBuffer, wrappingKey: ArrayBuffer, wrapAlgo: import("./global.js").WrapAlgoParams) => ArrayBuffer;
/**
 * @inheritDoc global!CCFCrypto.sign
 */
export declare const sign: (algorithm: import("./global.js").SigningAlgorithm, key: string, plaintext: ArrayBuffer) => ArrayBuffer;
/**
 * @inheritDoc global!CCFCrypto.verifySignature
 */
export declare const verifySignature: (algorithm: import("./global.js").SigningAlgorithm, key: string, signature: ArrayBuffer, plaintext: ArrayBuffer) => boolean;
/**
 * @inheritDoc global!CCFCrypto.digest
 */
export declare const digest: (algorithm: import("./global.js").DigestAlgorithm, plaintext: ArrayBuffer) => ArrayBuffer;
/**
 * @inheritDoc global!CCFCrypto.isValidX509CertBundle
 */
export declare const isValidX509CertBundle: (pem: string) => boolean;
/**
 * @inheritDoc global!CCFCrypto.isValidX509CertChain
 */
export declare const isValidX509CertChain: (chain: string, trusted: string) => boolean;
/**
 * @inheritDoc global!CCFCrypto.pubPemToJwk
 */
export declare const pubPemToJwk: (pem: string, kid?: string) => import("./global.js").JsonWebKeyECPublic;
/**
 * @inheritDoc global!CCFCrypto.pemToJwk
 */
export declare const pemToJwk: (pem: string, kid?: string) => import("./global.js").JsonWebKeyECPrivate;
/**
 * @inheritDoc global!CCFCrypto.pubRsaPemToJwk
 */
export declare const pubRsaPemToJwk: (pem: string, kid?: string) => import("./global.js").JsonWebKeyRSAPublic;
/**
 * @inheritDoc global!CCFCrypto.rsaPemToJwk
 */
export declare const rsaPemToJwk: (pem: string, kid?: string) => import("./global.js").JsonWebKeyRSAPrivate;
/**
 * @inheritDoc global!CCFCrypto.pubEddsaPemToJwk
 */
export declare const pubEddsaPemToJwk: (pem: string, kid?: string) => import("./global.js").JsonWebKeyEdDSAPublic;
/**
 * @inheritDoc global!CCFCrypto.eddsaPemToJwk
 */
export declare const eddsaPemToJwk: (pem: string, kid?: string) => import("./global.js").JsonWebKeyEdDSAPrivate;
/**
 * @inheritDoc global!CCFCrypto.pubJwkToPem
 */
export declare const pubJwkToPem: (jwk: import("./global.js").JsonWebKeyECPublic) => string;
/**
 * @inheritDoc global!CCFCrypto.jwkToPem
 */
export declare const jwkToPem: (jwk: import("./global.js").JsonWebKeyECPrivate) => string;
/**
 * @inheritDoc global!CCFCrypto.pubRsaJwkToPem
 */
export declare const pubRsaJwkToPem: (jwk: import("./global.js").JsonWebKeyRSAPublic) => string;
/**
 * @inheritDoc global!CCFCrypto.rsaJwkToPem
 */
export declare const rsaJwkToPem: (jwk: import("./global.js").JsonWebKeyRSAPrivate) => string;
/**
 * @inheritDoc global!CCFCrypto.pubEddsaJwkToPem
 */
export declare const pubEddsaJwkToPem: (jwk: import("./global.js").JsonWebKeyEdDSAPublic) => string;
/**
 * @inheritDoc global!CCFCrypto.eddsaJwkToPem
 */
export declare const eddsaJwkToPem: (jwk: import("./global.js").JsonWebKeyEdDSAPrivate) => string;
export { WrapAlgoParams, AesKwpParams, RsaOaepParams, RsaOaepAesKwpParams, CryptoKeyPair, DigestAlgorithm, SigningAlgorithm, } from "./global";
